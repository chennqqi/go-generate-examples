// Code generated by "enumer -type=MemberState -json -text -yaml"; DO NOT EDIT.

package example

import (
	"encoding/json"
	"fmt"
)

const _MemberStateName = "STARUPPRIMARYSECONDARYRECOVERINGDOWNSTARTUP2UNKNOWNARBITERREMOVEDROLLBACKSTALE"

var _MemberStateIndex = [...]uint8{0, 6, 13, 22, 32, 36, 44, 51, 58, 65, 73, 78}

func (i MemberState) String() string {
	if i >= MemberState(len(_MemberStateIndex)-1) {
		return fmt.Sprintf("MemberState(%d)", i)
	}
	return _MemberStateName[_MemberStateIndex[i]:_MemberStateIndex[i+1]]
}

var _MemberStateValues = []MemberState{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

var _MemberStateNameToValueMap = map[string]MemberState{
	_MemberStateName[0:6]:   0,
	_MemberStateName[6:13]:  1,
	_MemberStateName[13:22]: 2,
	_MemberStateName[22:32]: 3,
	_MemberStateName[32:36]: 4,
	_MemberStateName[36:44]: 5,
	_MemberStateName[44:51]: 6,
	_MemberStateName[51:58]: 7,
	_MemberStateName[58:65]: 8,
	_MemberStateName[65:73]: 9,
	_MemberStateName[73:78]: 10,
}

// MemberStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberStateString(s string) (MemberState, error) {
	if val, ok := _MemberStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberState values", s)
}

// MemberStateValues returns all values of the enum
func MemberStateValues() []MemberState {
	return _MemberStateValues
}

// IsAMemberState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberState) IsAMemberState() bool {
	for _, v := range _MemberStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberState
func (i MemberState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberState
func (i *MemberState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberState should be a string, got %s", data)
	}

	var err error
	*i, err = MemberStateString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MemberState
func (i MemberState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MemberState
func (i *MemberState) UnmarshalText(text []byte) error {
	var err error
	*i, err = MemberStateString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for MemberState
func (i MemberState) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for MemberState
func (i *MemberState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MemberStateString(s)
	return err
}
