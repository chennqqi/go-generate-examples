//go:generate swag init
package example

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	_ "28-swagger-doc/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/swaggo/http-swagger"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v1

func example() {
	http.HandleFunc("/swagger/", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:1323/swagger/doc.json"), //The url pointing to API definition"
	))

	http.ListenAndServe(":1323", nil)
}

type Location struct {
	Zip        string `json:"zip"`
	GeoCity    string `json:"geo_city"`
	GeoCountry string `json:"geo_country"`
}

type CR struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// Auth example
// @Id getLocation
// @Accept json
// @Summary get location bar
// @Description get location bar
// @Tags location
// @Produce  json
// @Success 200 {object} Location
// @Failure 400 {object} CR
// @Router /api/location [get]
func getLocation(w http.ResponseWriter, r *http.Request) {
	var lo Location
	writeJSON(200, w, lo)
}

// Auth example
// @Id setLocation
// @Accept json
// @Summary set location
// @Description set location
// @Tags location
// @Produce  json
// @Success 200 {object} CR
// @Failure 400 {object} CR
// @Router /api/location [post]
func setLocation(w http.ResponseWriter, r *http.Request) {
	txt, _ := ioutil.ReadAll(r.Body)
	defer r.Body.Close()
	var lo Location
	err := json.Unmarshal(txt, &lo)
	if err != nil {
		writeJSON(400, w, CR{
			Code:    1,
			Message: err.Error(),
		})
		return
	}

	writeJSON(200, w, CR{
		Code:    0,
		Message: "OK",
	})
}

func writeJSON(code int, w http.ResponseWriter, v interface{}) {
	if code == 0 {
		code = 200
	}
	txt, _ := json.Marshal(v)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	w.Write(txt)
}
